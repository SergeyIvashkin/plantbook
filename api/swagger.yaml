swagger: "2.0"
info:
  description: "This is a Plantbook project API description. You can find out more about us at [https://github.com/kaatinga/plantbook](https://github.com/kaatinga/plantbook)."
  version: "1.0.0"
  title: "Plantbook"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/mit-license.php"
basePath: "/"
tags:
  - name: "plant"
    description: "Everything about your Plants"
  - name: "user"
    description: "Operations about user"
schemes:
  - "https"
  - "http"
paths:
  /plant:
    post:
      tags:
        - "plant"
      summary: "Add a new plant to the garden"
      description: ""
      operationId: "addPlant"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Plant object that needs to be added to the garden"
          required: true
          schema:
            $ref: "#/definitions/Plant"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
        - "plant"
      summary: "Update an existing plant"
      description: ""
      operationId: "updatePlant"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Plant object that needs to be added to the garden"
          required: true
          schema:
            $ref: "#/definitions/Plant"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Plant not found"
        "405":
          description: "Validation exception"
  /plant/{plantId}:
    get:
      tags:
        - "plant"
      summary: "Find plant by ID"
      description: "Returns a single plant"
      operationId: "getPlantById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "plantId"
          in: "path"
          description: "ID of plant to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Plant"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Plant not found"
    post:
      tags:
        - "plant"
      summary: "Updates a plant in the garden with form data"
      description: ""
      operationId: "updatePlantWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "plantId"
          in: "path"
          description: "ID of pplant that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the plant"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the plant"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
    delete:
      tags:
        - "plant"
      summary: "Deletes a plant"
      description: ""
      operationId: "deletePlant"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "plantId"
          in: "path"
          description: "Plant id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Plant not found"
  /plant/{plantId}/uploadImage:
    post:
      tags:
        - "plant"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "plantId"
          in: "path"
          description: "ID of plant to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"

  Plant:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "rose"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
    xml:
      name: "plant"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"