swagger: "2.0"
info:
  description: "This is a Plantbook project API description. You can find out more about us at [https://github.com/kaatinga/plantbook](https://github.com/kaatinga/plantbook)."
  version: "1.0.0"
  title: "Plantbook"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/mit-license.php"
basePath: "/"
tags:
  - name: "plant"
    description: "Everything about your Plants"
  - name: "user"
    description: "Operations about user"
  - name: "health"
    description: "Operations about health checks"
  - name: "gardens"
    description: "Operations about user's gardens"
schemes:
  - "http"
paths:
  /health/live:
    get:
      tags:
        - "health"
      summary: "Probe service alive"
      description: "Checks web service is working"
      operationId: "healthAlive"
      responses:
        "200":
          description: "successful operation, service alive"
          schema:
            type: "string"
          headers:
            X-Request-Id:
                description: The request id this is a response to
                type: string
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
  /health/ready:
    get:
      tags:
        - "health"
      summary: "Probe service ready"
      description: "Checks web service is working, and subservices available"
      operationId: "healthReady"
      responses:
        "200":
          description: "successful operation, service ready to process requests"
          schema:
            type: "string"
          headers:
            X-Request-Id:
                description: The request id this is a response to
                type: string
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/v1/plant:
    post:
      tags:
        - "plant"
      summary: "Add a new plant to the garden"
      description: ""
      operationId: "addPlant"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Plant object that needs to be added to the garden"
          required: true
          schema:
            $ref: "#/definitions/Plant"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
        - "plant"
      summary: "Update an existing plant"
      description: ""
      operationId: "updatePlant"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Plant object that needs to be added to the garden"
          required: true
          schema:
            $ref: "#/definitions/Plant"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Plant not found"
        "405":
          description: "Validation exception"
  /api/v1/plant/{plantId}:
    get:
      tags:
        - "plant"
      summary: "Find plant by ID"
      description: "Returns a single plant"
      operationId: "getPlantById"
      produces:
        - "application/json"
      parameters:
        - name: "plantId"
          in: "path"
          description: "ID of plant to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Plant"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Plant not found"
    post:
      tags:
        - "plant"
      summary: "Updates a plant in the garden with form data"
      description: ""
      operationId: "updatePlantWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "plantId"
          in: "path"
          description: "ID of pplant that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the plant"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the plant"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
    delete:
      tags:
        - "plant"
      summary: "Deletes a plant"
      description: ""
      operationId: "deletePlant"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "plantId"
          in: "path"
          description: "Plant id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Plant not found"
  /api/v1/plant/{plantId}/uploadImage:
    post:
      tags:
        - "plant"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "plantId"
          in: "path"
          description: "ID of plant to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
  /api/v1/user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create user object without id and status"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        '201':
          description: "created user with id and status"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/User'
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/v1/user/login:
    post:
      tags:
        - "user"
      summary: "Logins user into the system"
      description: "Logins user by passing login/password"
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "login/password"
          in: "body"
          schema:
            $ref: '#/definitions/UserLoginPassword'
          
      responses:
        "200":
          description: "successful operation"
          headers:
            Set-Cookie:
              description: set cookie with jwt token value with name plantbook_token
              type: string
            X-Request-Id:
              description: The request id this is a response to
              type: string
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/v1/user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation, set expired cookie"
          headers:
            Set-Cookie:
              description: set expired cookie with name plantbook_token
              type: string
            X-Request-Id:
              description: The request id this is a response to
              type: string
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/v1/user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /api/v1/gardens:
    get:
      tags:
        - "gardens"
      summary: "Get list users's gardens"
      description: "Shows list users's gardens"
      operationId: "getUserGardens"
      parameters:
        - in: query
          name: offset
          type: integer
          format: "int64"
          description: The number of items to skip before starting to collect the result set.
        - in: query
          name: limit
          type: integer
          format: "int64"
          description: The numbers of items to return.
      produces:
        - "application/json"
      responses:
        '200':
          description: "List of the gardens"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/GardensResponse'
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - "gardens"
      summary: "Create new users's garden"
      description: "Creates new garden for user"
      operationId: "createUserGarden"
      parameters:
        - in: body
          name: garden
          required: true
          schema:
            $ref: '#/definitions/Garden'
          description: New garden parameters without id
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        '201':
          description: "New garden with id"
          schema:
            $ref: '#/definitions/Garden'
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/v1/gardens/{garden_id}:
    get:
      tags:
        - "gardens"
      summary: "Get garden by id"
      description: "Shows users's garden by specified garden_id"
      operationId: "getUserGardenByID"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: garden_id
          type: integer
          required: true
          description: Numeric ID of the user's garden to get.
      responses:
        '200':
          description: "Exists garden"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/Garden'
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - "gardens"
      summary: "Delete garden"
      description: "Deletes user's garden, can only admin or owner"
      operationId: "deleteUserGarden"
      parameters:
        - in: path
          name: garden_id
          type: integer
          required: true
          description: Numeric ID of the user's garden to delete.
      produces:
        - "application/json"
      responses:
        '200':
          description: "Garden deleted"
          schema:
            $ref: '#/definitions/Response'
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/v1/version:
    get:
      tags:
        - "health"
      summary: "Get app version"
      description: "Shows api version."
      operationId: "apiVersion"
      produces:
        - "application/json"
      responses:
        '200':
          description: "version info"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ApiVersion'
        default:
          description: "unexpected error"
          headers:
            X-Request-Id:
              description: The request id this is a response to
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
  /metrics:
    get:
      tags:
        - health
      summary: "Prometheus metrics"
      produces:
      - "text/plain"
      responses:
        200:
          description: ok
          schema:
            type: "string"
definitions:
  UserLoginPassword:
    type: "object"
    required: [login,password]
    properties:
      login:
        type: "string"
      password:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userRole:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 2
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  Plant:
    type: "object"
    required:
      - "title"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "rose"
      userId:
        type: "integer"
        format: "int64"
      gardenId:
        type: "integer"
        format: "int64"
      photoUrls:
        type: "array"
        items:
          type: "string"
      plantReferenceId:
        type: "integer"
        format: "int64"
        description: "plant's identifier from reference"
  Garden:
    type: "object"
    required:
      - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
        description: "owner identifier"
      title:
        type: "string"
        example: "rose"   
      description:
        type: "string"
  Gardens:
    type: "array"
    items:
      $ref: "#/definitions/Garden"
  GardensResponse:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/Gardens'
      result_set:
        $ref: '#/definitions/ResultSet'
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  ApiVersion:
    type: "object"
    properties: 
      version:
        type: "string"
      githash:
        type: "string"
      build_at:
        type: "string"
        format: "date-time"
  ErrorResponse:
    type: "object"
    properties: 
      message:
        type: "string"
  Response:
    type: "object"
    properties: 
      message:
        type: "string"
  ResultSet:
    type: "object"
    properties: 
      count:
        type: "integer"
        format: "int64"
      limit:
        type: "integer"
        format: "int64"
      offset:
        type: "integer"
        format: "int64"
      total:
        type: "integer"
        format: "int64"