// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	timeext "time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPlant user plant
//
// swagger:model UserPlant
type UserPlant struct {

	// created at
	CreatedAt timeext.Time `json:"createdAt,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// garden Id
	GardenID int64 `json:"gardenId,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last watering
	LastWatering timeext.Time `json:"lastWatering,omitempty"`

	// modified at
	// Min Length: 0
	// Format: date-time
	ModifiedAt strfmt.DateTime `json:"modifiedAt,omitempty"`

	// name
	// Example: my super rose
	// Required: true
	Name *string `json:"name"`

	// next watering
	NextWatering timeext.Time `json:"nextWatering,omitempty"`

	// photo urls
	// Required: true
	PhotoUrls []string `json:"photoUrls"`

	// plant's identifier from reference
	PlantReferenceID int64 `json:"plantReferenceId,omitempty"`

	// When the plant was planted
	// Format: date
	PlantingDate strfmt.Date `json:"plantingDate,omitempty"`

	// user Id
	UserID int64 `json:"userId,omitempty"`

	// How often you water them
	WateringInterval string `json:"wateringInterval,omitempty"`
}

// Validate validates this user plant
func (m *UserPlant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhotoUrls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlantingDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPlant) validateModifiedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedAt) { // not required
		return nil
	}

	if err := validate.MinLength("modifiedAt", "body", m.ModifiedAt.String(), 0); err != nil {
		return err
	}

	if err := validate.FormatOf("modifiedAt", "body", "date-time", m.ModifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserPlant) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserPlant) validatePhotoUrls(formats strfmt.Registry) error {

	if err := validate.Required("photoUrls", "body", m.PhotoUrls); err != nil {
		return err
	}

	return nil
}

func (m *UserPlant) validatePlantingDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PlantingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("plantingDate", "body", "date", m.PlantingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user plant based on context it is used
func (m *UserPlant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserPlant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPlant) UnmarshalBinary(b []byte) error {
	var res UserPlant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
