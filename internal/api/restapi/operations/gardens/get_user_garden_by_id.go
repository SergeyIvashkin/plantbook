// Code generated by go-swagger; DO NOT EDIT.

package gardens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUserGardenByIDHandlerFunc turns a function with the right signature into a get user garden by ID handler
type GetUserGardenByIDHandlerFunc func(GetUserGardenByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserGardenByIDHandlerFunc) Handle(params GetUserGardenByIDParams) middleware.Responder {
	return fn(params)
}

// GetUserGardenByIDHandler interface for that can handle valid get user garden by ID params
type GetUserGardenByIDHandler interface {
	Handle(GetUserGardenByIDParams) middleware.Responder
}

// NewGetUserGardenByID creates a new http.Handler for the get user garden by ID operation
func NewGetUserGardenByID(ctx *middleware.Context, handler GetUserGardenByIDHandler) *GetUserGardenByID {
	return &GetUserGardenByID{Context: ctx, Handler: handler}
}

/* GetUserGardenByID swagger:route GET /api/v1/gardens/{garden_id} gardens getUserGardenById

Get garden by id

Shows users's garden by specified garden_id

*/
type GetUserGardenByID struct {
	Context *middleware.Context
	Handler GetUserGardenByIDHandler
}

func (o *GetUserGardenByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUserGardenByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
