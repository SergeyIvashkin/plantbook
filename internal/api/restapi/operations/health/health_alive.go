// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// HealthAliveHandlerFunc turns a function with the right signature into a health alive handler
type HealthAliveHandlerFunc func(HealthAliveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn HealthAliveHandlerFunc) Handle(params HealthAliveParams) middleware.Responder {
	return fn(params)
}

// HealthAliveHandler interface for that can handle valid health alive params
type HealthAliveHandler interface {
	Handle(HealthAliveParams) middleware.Responder
}

// NewHealthAlive creates a new http.Handler for the health alive operation
func NewHealthAlive(ctx *middleware.Context, handler HealthAliveHandler) *HealthAlive {
	return &HealthAlive{Context: ctx, Handler: handler}
}

/* HealthAlive swagger:route GET /health/live health healthAlive

Probe service alive

Checks web service is working

*/
type HealthAlive struct {
	Context *middleware.Context
	Handler HealthAliveHandler
}

func (o *HealthAlive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewHealthAliveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
