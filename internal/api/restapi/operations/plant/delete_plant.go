// Code generated by go-swagger; DO NOT EDIT.

package plant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeletePlantHandlerFunc turns a function with the right signature into a delete plant handler
type DeletePlantHandlerFunc func(DeletePlantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeletePlantHandlerFunc) Handle(params DeletePlantParams) middleware.Responder {
	return fn(params)
}

// DeletePlantHandler interface for that can handle valid delete plant params
type DeletePlantHandler interface {
	Handle(DeletePlantParams) middleware.Responder
}

// NewDeletePlant creates a new http.Handler for the delete plant operation
func NewDeletePlant(ctx *middleware.Context, handler DeletePlantHandler) *DeletePlant {
	return &DeletePlant{Context: ctx, Handler: handler}
}

/* DeletePlant swagger:route DELETE /api/v1/plant/{plantId} plant deletePlant

Deletes a plant

*/
type DeletePlant struct {
	Context *middleware.Context
	Handler DeletePlantHandler
}

func (o *DeletePlant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeletePlantParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
