// Code generated by go-swagger; DO NOT EDIT.

package plant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPlantByIDHandlerFunc turns a function with the right signature into a get plant by Id handler
type GetPlantByIDHandlerFunc func(GetPlantByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPlantByIDHandlerFunc) Handle(params GetPlantByIDParams) middleware.Responder {
	return fn(params)
}

// GetPlantByIDHandler interface for that can handle valid get plant by Id params
type GetPlantByIDHandler interface {
	Handle(GetPlantByIDParams) middleware.Responder
}

// NewGetPlantByID creates a new http.Handler for the get plant by Id operation
func NewGetPlantByID(ctx *middleware.Context, handler GetPlantByIDHandler) *GetPlantByID {
	return &GetPlantByID{Context: ctx, Handler: handler}
}

/* GetPlantByID swagger:route GET /plant/{plantId} plant getPlantById

Find plant by ID

Returns a single plant

*/
type GetPlantByID struct {
	Context *middleware.Context
	Handler GetPlantByIDHandler
}

func (o *GetPlantByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPlantByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
