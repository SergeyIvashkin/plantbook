// Code generated by go-swagger; DO NOT EDIT.

package plant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdatePlantWithFormHandlerFunc turns a function with the right signature into a update plant with form handler
type UpdatePlantWithFormHandlerFunc func(UpdatePlantWithFormParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdatePlantWithFormHandlerFunc) Handle(params UpdatePlantWithFormParams) middleware.Responder {
	return fn(params)
}

// UpdatePlantWithFormHandler interface for that can handle valid update plant with form params
type UpdatePlantWithFormHandler interface {
	Handle(UpdatePlantWithFormParams) middleware.Responder
}

// NewUpdatePlantWithForm creates a new http.Handler for the update plant with form operation
func NewUpdatePlantWithForm(ctx *middleware.Context, handler UpdatePlantWithFormHandler) *UpdatePlantWithForm {
	return &UpdatePlantWithForm{Context: ctx, Handler: handler}
}

/* UpdatePlantWithForm swagger:route POST /api/v1/plant/{plantId} plant updatePlantWithForm

Updates a plant in the garden with form data

*/
type UpdatePlantWithForm struct {
	Context *middleware.Context
	Handler UpdatePlantWithFormHandler
}

func (o *UpdatePlantWithForm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdatePlantWithFormParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
