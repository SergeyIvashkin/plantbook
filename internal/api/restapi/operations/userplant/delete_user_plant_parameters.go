// Code generated by go-swagger; DO NOT EDIT.

package userplant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewDeleteUserPlantParams creates a new DeleteUserPlantParams object
//
// There are no default values defined in the spec.
func NewDeleteUserPlantParams() DeleteUserPlantParams {

	return DeleteUserPlantParams{}
}

// DeleteUserPlantParams contains all the bound params for the delete user plant operation
// typically these are obtained from a http.Request
//
// swagger:parameters deleteUserPlant
type DeleteUserPlantParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Owner of this plant, user id
	  Required: true
	  In: query
	*/
	UserID int64
	/*ID of user's plant.
	  Required: true
	  In: query
	*/
	UserplantID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteUserPlantParams() beforehand.
func (o *DeleteUserPlantParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qUserID, qhkUserID, _ := qs.GetOK("user_id")
	if err := o.bindUserID(qUserID, qhkUserID, route.Formats); err != nil {
		res = append(res, err)
	}

	qUserplantID, qhkUserplantID, _ := qs.GetOK("userplant_id")
	if err := o.bindUserplantID(qUserplantID, qhkUserplantID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindUserID binds and validates parameter UserID from query.
func (o *DeleteUserPlantParams) bindUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("user_id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("user_id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("user_id", "query", "int64", raw)
	}
	o.UserID = value

	return nil
}

// bindUserplantID binds and validates parameter UserplantID from query.
func (o *DeleteUserPlantParams) bindUserplantID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("userplant_id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("userplant_id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("userplant_id", "query", "int64", raw)
	}
	o.UserplantID = value

	return nil
}
