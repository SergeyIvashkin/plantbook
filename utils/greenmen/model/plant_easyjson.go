// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel(in *jlexer.Lexer, out *ShortInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = string(in.String())
		case "recommend_position":
			out.RecommendPosition = string(in.String())
		case "regard_to_light":
			out.RegardToLight = string(in.String())
		case "regard_to_moisture":
			out.RegardToMoisture = string(in.String())
		case "flowering_time":
			out.FloweringTime = string(in.String())
		case "hight":
			out.Hight = string(in.String())
		case "classifiers":
			out.Classifiers = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel(out *jwriter.Writer, in ShortInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"recommend_position\":"
		out.RawString(prefix)
		out.String(string(in.RecommendPosition))
	}
	{
		const prefix string = ",\"regard_to_light\":"
		out.RawString(prefix)
		out.String(string(in.RegardToLight))
	}
	{
		const prefix string = ",\"regard_to_moisture\":"
		out.RawString(prefix)
		out.String(string(in.RegardToMoisture))
	}
	{
		const prefix string = ",\"flowering_time\":"
		out.RawString(prefix)
		out.String(string(in.FloweringTime))
	}
	{
		const prefix string = ",\"hight\":"
		out.RawString(prefix)
		out.String(string(in.Hight))
	}
	{
		const prefix string = ",\"classifiers\":"
		out.RawString(prefix)
		out.String(string(in.Classifiers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShortInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShortInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShortInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShortInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel(l, v)
}
func easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel1(in *jlexer.Lexer, out *Plants) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Plants, 0, 0)
			} else {
				*out = Plants{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Plant
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel1(out *jwriter.Writer, in Plants) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Plants) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Plants) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Plants) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Plants) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel1(l, v)
}
func easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel2(in *jlexer.Lexer, out *Plant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "short_info":
			(out.ShortInfo).UnmarshalEasyJSON(in)
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]string, 0, 4)
					} else {
						out.Images = []string{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Images = append(out.Images, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "info":
			if in.IsNull() {
				in.Skip()
				out.Info = nil
			} else {
				in.Delim('[')
				if out.Info == nil {
					if !in.IsDelim(']') {
						out.Info = make([]Info, 0, 2)
					} else {
						out.Info = []Info{}
					}
				} else {
					out.Info = (out.Info)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Info
					(v5).UnmarshalEasyJSON(in)
					out.Info = append(out.Info, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel2(out *jwriter.Writer, in Plant) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"short_info\":"
		out.RawString(prefix)
		(in.ShortInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Images {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		if in.Info == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Info {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		(in.Metadata).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Plant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Plant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Plant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Plant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel2(l, v)
}
func easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel3(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date_collect":
			out.DateCollect = string(in.String())
		case "target":
			out.Target = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel3(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date_collect\":"
		out.RawString(prefix[1:])
		out.String(string(in.DateCollect))
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		out.String(string(in.Target))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel3(l, v)
}
func easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel4(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel4(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson30217d55EncodeGithubComKaatingaPlantbookUtilsGreenmenModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson30217d55DecodeGithubComKaatingaPlantbookUtilsGreenmenModel4(l, v)
}
